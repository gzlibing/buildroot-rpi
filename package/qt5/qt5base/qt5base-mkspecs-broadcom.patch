diff -Naur qt5base-5.2.0-rc1/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qdirectfbeglhooks_bcm97425.cpp qt5new/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qdirectfbeglhooks_bcm97425.cpp
--- qt5base-5.2.0-rc1/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qdirectfbeglhooks_bcm97425.cpp	2013-11-27 02:01:16.000000000 +0100
+++ qt5new/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qdirectfbeglhooks_bcm97425.cpp	1970-01-01 01:00:00.000000000 +0100
@@ -1,74 +0,0 @@
-/****************************************************************************
-**
-** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
-** Contact: http://www.qt-project.org/legal
-**
-** This file is part of the qmake spec of the Qt Toolkit.
-**
-** $QT_BEGIN_LICENSE:LGPL$
-** Commercial License Usage
-** Licensees holding valid commercial Qt licenses may use this file in
-** accordance with the commercial license agreement provided with the
-** Software or, alternatively, in accordance with the terms contained in
-** a written agreement between you and Digia.  For licensing terms and
-** conditions see http://qt.digia.com/licensing.  For further information
-** use the contact form at http://qt.digia.com/contact-us.
-**
-** GNU Lesser General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU Lesser
-** General Public License version 2.1 as published by the Free Software
-** Foundation and appearing in the file LICENSE.LGPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU Lesser General Public License version 2.1 requirements
-** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
-**
-** In addition, as a special exception, Digia gives you certain additional
-** rights.  These rights are described in the Digia Qt LGPL Exception
-** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
-**
-** GNU General Public License Usage
-** Alternatively, this file may be used under the terms of the GNU
-** General Public License version 3.0 as published by the Free Software
-** Foundation and appearing in the file LICENSE.GPL included in the
-** packaging of this file.  Please review the following information to
-** ensure the GNU General Public License version 3.0 requirements will be
-** met: http://www.gnu.org/copyleft/gpl.html.
-**
-**
-** $QT_END_LICENSE$
-**
-****************************************************************************/
-
-#include "qdirectfbeglhooks.h"
-#include "qdirectfbconvenience.h"
-
-#include "default_directfb.h"
-
-QT_BEGIN_NAMESPACE
-
-// Exported to the directfb plugin
-QDirectFBEGLHooks platform_hook;
-static void *dbpl_handle;
-
-void QDirectFBEGLHooks::platformInit()
-{
-    DBPL_RegisterDirectFBDisplayPlatform(&dbpl_handle, QDirectFbConvenience::dfbInterface());
-}
-
-void QDirectFBEGLHooks::platformDestroy()
-{
-    DBPL_UnregisterDirectFBDisplayPlatform(&dbpl_handle);
-    dbpl_handle = 0;
-}
-
-bool QDirectFBEGLHooks::hasCapability(QPlatformIntegration::Capability cap) const
-{
-    switch (cap) {
-    case QPlatformIntegration::ThreadedOpenGL:
-        return true;
-    default:
-        return false;
-    }
-}
-
-QT_END_NAMESPACE
diff -Naur qt5base-5.2.0-rc1/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qeglfshooks_bcm.cpp qt5new/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qeglfshooks_bcm.cpp
--- qt5base-5.2.0-rc1/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qeglfshooks_bcm.cpp	1970-01-01 01:00:00.000000000 +0100
+++ qt5new/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qeglfshooks_bcm.cpp	2013-12-09 17:40:07.819073614 +0100
@@ -0,0 +1,394 @@
+/****************************************************************************
+**
+** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
+** Contact: http://www.qt-project.org/legal
+**
+** This file is part of the qmake spec of the Qt Toolkit.
+**
+** $QT_BEGIN_LICENSE:LGPL$
+** Commercial License Usage
+** Licensees holding valid commercial Qt licenses may use this file in
+** accordance with the commercial license agreement provided with the
+** Software or, alternatively, in accordance with the terms contained in
+** a written agreement between you and Digia.  For licensing terms and
+** conditions see http://qt.digia.com/licensing.  For further information
+** use the contact form at http://qt.digia.com/contact-us.
+**
+** GNU Lesser General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU Lesser
+** General Public License version 2.1 as published by the Free Software
+** Foundation and appearing in the file LICENSE.LGPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU Lesser General Public License version 2.1 requirements
+** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
+**
+** In addition, as a special exception, Digia gives you certain additional
+** rights.  These rights are described in the Digia Qt LGPL Exception
+** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
+**
+** GNU General Public License Usage
+** Alternatively, this file may be used under the terms of the GNU
+** General Public License version 3.0 as published by the Free Software
+** Foundation and appearing in the file LICENSE.GPL included in the
+** packaging of this file.  Please review the following information to
+** ensure the GNU General Public License version 3.0 requirements will be
+** met: http://www.gnu.org/copyleft/gpl.html.
+**
+**
+** $QT_END_LICENSE$
+**
+****************************************************************************/
+
+#include "qeglfshooks.h"
+#include "qeglfscursor.h"
+
+#include <QtDebug>
+
+#include <QtPlatformSupport/private/qeglconvenience_p.h>
+#include <QtPlatformSupport/private/qeglplatformcontext_p.h>
+
+// #include <bcm_host.h>
+
+QT_BEGIN_NAMESPACE
+
+#include "nexus_platform.h"
+#include "nexus_display.h"
+#include "nexus_core_utils.h"
+
+#include "default_nexus.h"
+
+#define UNUSED(X) (void)X
+
+/* SIXTY_HZ needs to be defined for B552 LVDS->DVI converter support */
+/* #define SIXTY_HZ */
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif //__cplusplus
+
+static unsigned int gs_screen_wdt   = 0;
+static unsigned int gs_screen_hgt   = 0;
+
+static NEXUS_DisplayHandle  gs_nexus_display = 0;
+static void                 *gs_native_window = 0;
+
+static NXPL_PlatformHandle  nxpl_handle = 0;
+
+bool InitPlatform(void)
+{
+    NEXUS_PlatformSettings        platform_settings;
+    NEXUS_Error                   err;
+
+    /* Initialise the Nexus platform */
+    NEXUS_Platform_GetDefaultSettings(&platform_settings);
+#if NEXUS_DTV_PLATFORM
+#ifdef SIXTY_HZ
+    platform_settings.displayModuleSettings.panel.dvoLinkMode = NEXUS_PanelOutputLinkMode_eDualChannel1;
+    platform_settings.displayModuleSettings.panel.lvdsColorMode = NEXUS_LvdsColorMode_e8Bit;
+#endif
+#endif
+    platform_settings.openFrontend = false;
+
+    err = NEXUS_Platform_Init(&platform_settings);
+    if (err)
+    {
+        qFatal("Err: NEXUS_Platform_Init() failed");
+        return false;
+    }
+
+    return true;
+}
+
+
+NEXUS_DisplayHandle OpenDisplay(NEXUS_VideoFormat format)
+{
+
+    NEXUS_DisplayHandle     display = NULL;
+    NEXUS_DisplaySettings   display_settings;
+    NEXUS_GraphicsSettings  graphics_settings;
+
+    /* Bring up display */
+    NEXUS_Display_GetDefaultSettings(&display_settings);
+
+    if (format != 0)
+    {
+        display_settings.format = format;
+    }
+
+    display = NEXUS_Display_Open(0, &display_settings);
+    if (display == NULL)
+    {
+        qFatal("Err: NEXUS_Display_Open() failed");
+        return NULL;
+    }
+
+    NEXUS_Display_GetGraphicsSettings(display, &graphics_settings);
+    graphics_settings.horizontalFilter = NEXUS_GraphicsFilterCoeffs_eBilinear;
+    graphics_settings.verticalFilter = NEXUS_GraphicsFilterCoeffs_eBilinear;
+    NEXUS_Display_SetGraphicsSettings(display, &graphics_settings);
+
+    return display;
+}
+
+void InitPanelOutput(NEXUS_DisplayHandle display)
+{
+
+#if NEXUS_NUM_PANEL_OUTPUTS
+
+    NEXUS_PlatformConfiguration   platform_config;
+
+    NEXUS_Platform_GetConfiguration(&platform_config);
+
+    if (platform_config.outputs.panel[0])
+    {
+#ifdef SIXTY_HZ
+        {
+            NEXUS_PanelOutputSettings     panelOutputSettings;
+            NEXUS_PanelOutput_GetSettings(platform_config.outputs.panel[0], &panelOutputSettings);
+            panelOutputSettings.frameRateMultiplier = 1;
+            NEXUS_PanelOutput_SetSettings(platform_config.outputs.panel[0], &panelOutputSettings);
+        }
+#endif
+        NEXUS_Display_AddOutput(display, NEXUS_PanelOutput_GetConnector(platform_config.outputs.panel[0]));
+    }
+#else
+    UNUSED(display);
+#endif
+}
+
+void InitComponentOutput(NEXUS_DisplayHandle display)
+{
+
+#if NEXUS_NUM_COMPONENT_OUTPUTS && !NEXUS_DTV_PLATFORM
+
+    NEXUS_PlatformConfiguration   platform_config;
+    NEXUS_Platform_GetConfiguration(&platform_config);
+
+    if (platform_config.outputs.component[0])
+    {
+        NEXUS_Display_AddOutput(display, NEXUS_ComponentOutput_GetConnector(platform_config.outputs.component[0]));
+    }
+#else
+    UNUSED(display);
+#endif
+}
+
+void InitCompositeOutput(NEXUS_DisplayHandle display, uint32_t w, uint32_t h)
+{
+
+#if NEXUS_NUM_COMPOSITE_OUTPUTS && !NEXUS_DTV_PLATFORM
+
+    NEXUS_PlatformConfiguration   platform_config;
+
+    if (w <= 720 && h <=480)
+    {
+        NEXUS_Platform_GetConfiguration(&platform_config);
+
+        if (platform_config.outputs.composite[0])
+        {
+            NEXUS_Display_AddOutput(display, NEXUS_CompositeOutput_GetConnector(platform_config.outputs.composite[0]));
+        }
+    }
+#else
+   UNUSED(display);
+#endif
+}
+
+#if NEXUS_NUM_HDMI_OUTPUTS && !NEXUS_DTV_PLATFORM
+static void hotplug_callback(void *pParam, int iParam)
+{
+
+    NEXUS_HdmiOutputStatus status;
+    NEXUS_HdmiOutputHandle hdmi = (NEXUS_HdmiOutputHandle)pParam;
+    NEXUS_DisplayHandle display = (NEXUS_DisplayHandle)iParam;
+
+    NEXUS_HdmiOutput_GetStatus(hdmi, &status);
+    qDebug("HDMI hotplug event: %s", status.connected?"connected":"not connected");
+
+   /* the app can choose to switch to the preferred format, but it's not required. */
+    if (status.connected)
+    {
+        NEXUS_DisplaySettings displaySettings;
+        NEXUS_Display_GetSettings(display, &displaySettings);
+        qDebug("Switching to preferred format %d", status.preferredVideoFormat);
+        displaySettings.format = status.preferredVideoFormat;
+        NEXUS_Display_SetSettings(display, &displaySettings);
+    }
+}
+#endif
+
+void InitHDMIOutput(NEXUS_DisplayHandle display)
+{
+
+#if NEXUS_NUM_HDMI_OUTPUTS && !NEXUS_DTV_PLATFORM
+
+    NEXUS_HdmiOutputSettings      hdmiSettings;
+    NEXUS_PlatformConfiguration   platform_config;
+    NEXUS_Platform_GetConfiguration(&platform_config);
+
+    if (platform_config.outputs.hdmi[0])
+    {
+        NEXUS_Display_AddOutput(display, NEXUS_HdmiOutput_GetVideoConnector(platform_config.outputs.hdmi[0]));
+        /* Install hotplug callback -- video only for now */
+        NEXUS_HdmiOutput_GetSettings(platform_config.outputs.hdmi[0], &hdmiSettings);
+        hdmiSettings.hotplugCallback.callback = hotplug_callback;
+        hdmiSettings.hotplugCallback.context = platform_config.outputs.hdmi[0];
+        hdmiSettings.hotplugCallback.param = (int)display;
+        NEXUS_HdmiOutput_SetSettings(platform_config.outputs.hdmi[0], &hdmiSettings);
+
+        /* Force a hotplug to switch to a supported format if necessary */
+        hotplug_callback(platform_config.outputs.hdmi[0], (int)display);
+    }
+#else
+    UNUSED(display);
+#endif
+}
+
+bool InitDisplay(void)
+{
+
+    NXPL_NativeWindowInfo   win_info;
+    NEXUS_GraphicsSettings  graphics_settings;
+    NEXUS_DisplaySettings   disp_settings;
+    NEXUS_VideoFormatInfo   video_format_info;
+
+    if (InitPlatform() == false)
+    {
+        qFatal("Err: InitPlatform() failed");
+        return false;
+    }
+
+    gs_nexus_display = OpenDisplay((NEXUS_VideoFormat)0);
+    if (gs_nexus_display == NULL)
+    {
+        NEXUS_Platform_Uninit();
+        qFatal("Err: OpenDisplay() failed");
+        return false;
+    }
+
+    InitPanelOutput(gs_nexus_display);
+    InitCompositeOutput(gs_nexus_display, gs_screen_wdt, gs_screen_hgt);
+    InitComponentOutput(gs_nexus_display);
+    InitHDMIOutput(gs_nexus_display);
+
+    NEXUS_Display_GetSettings(gs_nexus_display, &disp_settings);
+    NEXUS_VideoFormat_GetInfo(disp_settings.format, &video_format_info);
+    gs_screen_wdt = video_format_info.width;
+    gs_screen_hgt = video_format_info.height;
+    qDebug("Screen width %d, Screen height %d", gs_screen_wdt, gs_screen_hgt);
+
+    /* Register this display for exclusive mode access */
+    NXPL_RegisterNexusDisplayPlatform(&nxpl_handle, gs_nexus_display);
+
+    NEXUS_Display_GetGraphicsSettings(gs_nexus_display, &graphics_settings);
+
+    win_info.x = 0; 
+    win_info.y = 0;
+    win_info.width = gs_screen_wdt;
+    win_info.height = gs_screen_hgt;
+    win_info.stretch = true;
+    gs_native_window = NXPL_CreateNativeWindow(&win_info);
+
+    return true;
+}
+
+void* NativeWindowHandle(void)
+{
+    return gs_native_window;
+}
+
+void DeInitPlatform(void)
+{
+    if (gs_nexus_display != 0)
+    {
+        NXPL_DestroyNativeWindow(gs_native_window);
+        NXPL_UnregisterNexusDisplayPlatform(nxpl_handle);
+
+        /* Close the Nexus display */
+        NEXUS_Display_Close(gs_nexus_display);
+    }
+
+    /* Close the platform */
+    NEXUS_Platform_Uninit();
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+class QEglFSBCMHooks : public QEglFSHooks
+{
+public:
+    virtual void platformInit();
+    virtual void platformDestroy();
+    virtual EGLNativeDisplayType platformDisplay() const;
+    virtual QSize screenSize() const;
+    virtual EGLNativeWindowType createNativeWindow(QPlatformWindow *window, const QSize &size, const QSurfaceFormat &format);
+    virtual void destroyNativeWindow(EGLNativeWindowType window);
+    virtual bool hasCapability(QPlatformIntegration::Capability cap) const;
+    virtual QSurfaceFormat surfaceFormatFor(const QSurfaceFormat &inputFormat) const;
+};
+
+void QEglFSBCMHooks::platformInit()
+{
+    InitDisplay();
+}
+
+EGLNativeDisplayType QEglFSBCMHooks::platformDisplay() const
+{
+    return EGL_DEFAULT_DISPLAY;
+}
+
+void QEglFSBCMHooks::platformDestroy()
+{
+    DeInitPlatform();
+}
+
+QSize QEglFSBCMHooks::screenSize() const
+{
+    return QSize(gs_screen_wdt, gs_screen_hgt);
+}
+
+EGLNativeWindowType QEglFSBCMHooks::createNativeWindow(QPlatformWindow *window, const QSize &size, const QSurfaceFormat &format)
+{
+    Q_UNUSED(window)
+    Q_UNUSED(size)
+    Q_UNUSED(format)
+    return (EGLNativeWindowType)NativeWindowHandle();
+}
+
+void QEglFSBCMHooks::destroyNativeWindow(EGLNativeWindowType window)
+{
+    Q_UNUSED(window)
+}
+
+bool QEglFSBCMHooks::hasCapability(QPlatformIntegration::Capability cap) const
+{
+    switch (cap) {
+        case QPlatformIntegration::ThreadedPixmaps:
+        case QPlatformIntegration::OpenGL:
+        case QPlatformIntegration::ThreadedOpenGL:
+        case QPlatformIntegration::BufferQueueingOpenGL:
+            return true;
+        default:
+            return false;
+    }
+}
+
+QSurfaceFormat QEglFSBCMHooks::surfaceFormatFor(const QSurfaceFormat &inputFormat) const
+{
+    QSurfaceFormat format = inputFormat;
+    format.setDepthBufferSize(24);
+    format.setStencilBufferSize(8);
+    format.setRedBufferSize(8);
+    format.setGreenBufferSize(8);
+    format.setBlueBufferSize(8);
+    format.setAlphaBufferSize(8);
+    return format;
+}
+
+QEglFSBCMHooks eglFSBCMHooks;
+QEglFSHooks *platformHooks = &eglFSBCMHooks;
+
+QT_END_NAMESPACE
diff -Naur qt5base-5.2.0-rc1/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qmake.conf qt5new/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qmake.conf
--- qt5base-5.2.0-rc1/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qmake.conf	2013-11-27 02:01:16.000000000 +0100
+++ qt5new/mkspecs/devices/linux-mipsel-broadcom-97425-g++/qmake.conf	2013-12-09 17:40:07.819073614 +0100
@@ -1,65 +1,26 @@
 #
 # qmake configuration for linux-mipsel-broadcom-97425-g++
 #
+
+include(../common/linux_device_pre.conf)
+
+QT_QPA_DEFAULT_PLATFORM = eglfs
+
+QMAKE_LFLAGS            += -Wl,-rpath-link,$$[QT_SYSROOT]/usr/lib
+
+QMAKE_LIBDIR_EGL        = $$[QT_SYSROOT]/usr/lib
+QMAKE_LIBDIR_OPENGL_ES2 = $$[QT_SYSROOT]/usr/lib
+QMAKE_LIBDIR_OPENVG     = $$[QT_SYSROOT]/usr/lib
+
+QMAKE_INCDIR_EGL        = $$[QT_SYSROOT]/usr/include $$[QT_SYSROOT]/usr/include/interface/vcos/pthreads $$[QT_SYSROOT]/usr/include/interface/vmcs_host/linux
+QMAKE_INCDIR_OPENGL_ES2 = $${QMAKE_INCDIR_EGL}
 
-MAKEFILE_GENERATOR      = UNIX
-CONFIG                 += incremental gdb_dwarf_index
-QMAKE_INCREMENTAL_STYLE = sublib
-
-include(../../common/linux.conf)
-include(../../common/gcc-base-unix.conf)
-include(../../common/g++-unix.conf)
-
-load(device_config)
-
-# Modify the defaults we loaded above
-CROSS_COMPILE           = mipsel-linux-
-QMAKE_CC                = $${CROSS_COMPILE}gcc
-QMAKE_CXX               = $${CROSS_COMPILE}g++
-QMAKE_LINK              = $${QMAKE_CXX}
-QMAKE_LINK_SHLIB        = $${QMAKE_CXX}
-
-QMAKE_AR                = $${CROSS_COMPILE}ar cqs
-QMAKE_OBJCOPY           = $${CROSS_COMPILE}objcopy
-QMAKE_NM                = $${CROSS_COMPILE}nm -P
-QMAKE_STRIP             = $${CROSS_COMPILE}strip
-
-#TODO: Clean Qt to work with uclibc not calling itself GLIBC.
-#QMAKE_CFLAGS           += -D__FORCE_NOGLIBC
-#QMAKE_CXXFLAGS         += -D__FORCE_NOGLIBC
-
-
-BRCM_PLATFORM           = 97425
-
-# Sanity checks
-deviceSanityCheckCompiler()
-isEmpty(B_REFSW_DEBUG):error("B_REFSW_DEBUG needs to be set via -device-option B_REFSW_DEBUG=(y|n).")
-isEmpty(BRCM_ROCKFORD_PATH):error("BRCM_ROCKFORD_PATH needs to be set via -device-option BRCM_ROCKFORD_PATH=path.")
-isEmpty(BRCM_APPLIBS_PATH):error("BRCM_APPLIBS_PATH needs to be set via -device-option BRCM_APPLIBS_PATH=path.")
-
-# Figure the kind of directfb build used.
-BRCM_BUILD_TYPE         = debug
-contains(B_REFSW_DEBUG, [Nn]) {
-    BRCM_BUILD_TYPE     = release
-}
-
-QMAKE_INCDIR_OPENGL_ES2 = $${BRCM_ROCKFORD_PATH}/middleware/v3d/interface/khronos/include
-QMAKE_LIBDIR_OPENGL_ES2 = $${BRCM_ROCKFORD_PATH}/middleware/v3d/lib_$${BRCM_PLATFORM}_$${BRCM_BUILD_TYPE}
-QMAKE_LIBS_OPENGL_ES2   = -lv3ddriver -lrt
-QMAKE_LIBS_EGL          =
-
-INCLUDEPATH            += $${BRCM_APPLIBS_PATH}/opensource/zlib/zlib-1.2.3
-QMAKE_LIBDIR           += $${BRCM_APPLIBS_PATH}/opensource/zlib/zlib-1.2.3
-
-QMAKE_LFLAGS           += -Wl,-rpath-link,$$QMAKE_LIBDIR_OPENGL_ES2  -Wl,-rpath-link,$${BRCM_APPLIBS_PATH}/opensource/zlib/zlib-1.2.3
-
-# DirectFB platform hooks for this hardware
-QT_CONFIG              += directfb_egl egl
-DIRECTFB_PLATFORM_HOOKS_SOURCES = $$PWD/qdirectfbeglhooks_bcm97425.cpp
-DIRECTFB_PLATFORM_HOOKS_INCLUDEPATH = $${BRCM_ROCKFORD_PATH}/middleware/platform/directfb
-DIRECTFB_PLATFORM_HOOKS_LIBS = -ldbpl
-DIRECTFB_PLATFORM_HOOKS_LIBDIR = $${BRCM_ROCKFORD_PATH}/middleware/platform/directfb/lib_$${BRCM_PLATFORM}_$${BRCM_BUILD_TYPE}
+QMAKE_LIBS_EGL          = -lEGL -lGLESv2
+QMAKE_INCDIR_OPENVG     = $$[QT_SYSROOT]/usr/lib
+QMAKE_LIBS_OPENVG       = -lOpenVG
+QMAKE_LIBS_OPENVG      += $${QMAKE_LIBS_EGL}
+QMAKE_CFLAGS           += -DBDBG_DEBUG_BUILD=1 -DNEXUS_SERVER_SUPPORT=1 -D_GNU_SOURCE=1 -DLINUX _FILE_OFFSET_BITS=64 -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -DBSTD_CPU_ENDIAN=BSTD_ENDIAN_LITTLE -DNEXUS_MODE_proxy -DNEXUS_PLATFORM_DOCSIS_OOB_SUPPORT=1 -DPLATFORM=PACE_DMC7000KLG_CADB -DNEXUS_PLATFORM=PACE_DMC7000KLG_CADB -DBCHP_CHIP=7429 -DBCHP_VER=BCHP_VER_B0 -DBMEM_REENTRANT_CONFIG=BMEM_REENTRANT -DBINT_REENTRANT_CONFIG=BINT_REENTRANT -DNEXUS_PROFILE_OS_linuxuser -DBBCP_SUPPORT -DNEXUS_FRONTEND_3255 -DNEXUS_FRONTEND_ACCUMULATE_STATISTICS=1 -DNEXUS_HAS_MXT=1 -DNEXUS_SECURITY_CHIP_SIZE=40 -DNEXUS_SECURITY_HAS_ASKM=1 -DNEXUS_SECURITY_SC_VALUE -DNEXUS_SECURITY_SC_VALUE -DNEXUS_SECURITY_EXT_KEY_IV -DNEXUS_KEYLADDER=1 -DNEXUS_HAS_KEYLADDER_SUPPORT=1 -DNEXUS_OTPMSP=1 -DNEXUS_USERCMD=1 -DNEXUS_SECURITY_RAWCMD=1 -DBXPT_MESG_DONT_AUTO_ENABLE_PID_CHANNEL -DNEXUS_OTFPVR=1 -DNEXUS_SYNC_CHANNEL_SARNOFF_LIPSYNC_OFFSET_SUPPORT=1 -DNEXUS_HAS_PLATFORM -DNEXUS_HAS_CORE -DNEXUS_HAS_PWM -DNEXUS_HAS_I2C -DNEXUS_HAS_GPIO -DNEXUS_HAS_LED -DNEXUS_HAS_IR_INPUT -DNEXUS_HAS_IR_BLASTER -DNEXUS_HAS_INPUT_CAPTURE -DNEXUS_HAS_KEYPAD -DNEXUS_HAS_FRONTEND -DNEXUS_HAS_SPI -DNEXUS_HAS_SECURITY -DNEXUS_HAS_DMA -DNEXUS_HAS_TRANSPORT -DNEXUS_HAS_VIDEO_DECODER -DNEXUS_HAS_AUDIO -DNEXUS_HAS_SURFACE -DNEXUS_HAS_GRAPHICS2D -DNEXUS_HAS_DISPLAY -DNEXUS_HAS_ASTM -DNEXUS_HAS_SYNC_CHANNEL -DNEXUS_HAS_HDMI_OUTPUT -DNEXUS_HAS_RFM -DNEXUS_HAS_PICTURE_DECODER -DNEXUS_HAS_CEC -DNEXUS_HAS_SMARTCARD -DNEXUS_HAS_SURFACE_COMPOSITOR -DNEXUS_HAS_INPUT_ROUTER -DNEXUS_HAS_SIMPLE_DECODER -DNEXUS_HAS_FILE -DNEXUS_HAS_PLAYBACK -DNEXUS_HAS_RECORD -DNEXUS_HAS_GRAPHICS3D -DBCHP_PWR_SUPPORT
 
-QT_QPA_DEFAULT_PLATFORM = directfbegl
+EGLFS_PLATFORM_HOOKS_SOURCES = $$PWD/qeglfshooks_bcm.cpp
 
 load(qt_config)
