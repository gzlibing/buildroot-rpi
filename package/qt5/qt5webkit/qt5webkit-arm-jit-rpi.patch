--- a/Source/JavaScriptCore/jit/JITInlines.h
+++ b/Source/JavaScriptCore/jit/JITInlines.h
@@ -179,7 +179,14 @@ ALWAYS_INLINE void JIT::endUninterruptedSequence(int insnSpace, int constSpace,
      * calculation of length of uninterrupted sequence. So, the insnSpace and
      * constSpace should be upper limit instead of hard limit.
      */
-#if CPU(SH4)
+/* FIXME: Check if we can do better on ARM. For now we just want to avoid the
+ * following javascriptcore test crashes:
+ * ecma/FunctionObjects/15.3.1.1-3.js
+ * ecma/FunctionObjects/15.3.2.1-3.js
+ * ecma/FunctionObjects/15.3.5-1.js
+ */
+#if CPU(SH4) || CPU(ARM_TRADITIONAL)
+
     if ((dst > 15) || (dst < -16)) {
         insnSpace += 8;
         constSpace += 2;
--- a/Source/JavaScriptCore/jit/JITStubs.cpp
+++ b/Source/JavaScriptCore/jit/JITStubs.cpp
@@ -2461,6 +2461,8 @@ DEFINE_STUB_FUNCTION(EncodedJSValue, op_get_by_val)
         ByValInfo& byValInfo = callFrame->codeBlock()->getByValInfo(bytecodeOffset - 1);
         ASSERT(!byValInfo.stubRoutine);
         
+/* FIXME: Temporarily disabling this code on ARM because of a lot of crashing tests. */
+#if !CPU(ARM_TRADITIONAL)
         if (hasOptimizableIndexing(object->structure())) {
             // Attempt to optimize.
             JITArrayMode arrayMode = jitArrayModeForStructure(object->structure());
@@ -2469,6 +2471,7 @@ DEFINE_STUB_FUNCTION(EncodedJSValue, op_get_by_val)
                 didOptimize = true;
             }
         }
+#endif
         
         if (!didOptimize) {
             // If we take slow path more than 10 times without patching then make sure we
@@ -2594,7 +2597,9 @@ DEFINE_STUB_FUNCTION(void, op_put_by_val)
         ASSERT(bytecodeOffset);
         ByValInfo& byValInfo = callFrame->codeBlock()->getByValInfo(bytecodeOffset - 1);
         ASSERT(!byValInfo.stubRoutine);
-        
+
+ /* FIXME: Temporarily disabling this code on ARM because of a lot of crashing tests. */
+#if !CPU(ARM_TRADITIONAL)
         if (hasOptimizableIndexing(object->structure())) {
             // Attempt to optimize.
             JITArrayMode arrayMode = jitArrayModeForStructure(object->structure());
@@ -2603,6 +2608,7 @@ DEFINE_STUB_FUNCTION(void, op_put_by_val)
                 didOptimize = true;
             }
         }
+#endif
 
         if (!didOptimize) {
             // If we take slow path more than 10 times without patching then make sure we
